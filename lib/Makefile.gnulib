## Process this file with automake to produce Makefile.in.
# Copyright (C) 2004-2006 Free Software Foundation, Inc.
#
# This file is free software, distributed under the terms of the GNU
# General Public License.  As a special exception to the GNU General
# Public License, this file may be distributed as part of a program
# that contains a configuration script generated by Autoconf, under
# the same distribution terms as the rest of that program.
#
# Generated by gnulib-tool.
# Reproduce by: gnulib-tool --import --dir=. --lib=libcvs --source-base=lib --m4-base=m4 --doc-base=doc --aux-dir=build-aux --no-libtool --macro-prefix=gl allocsa atexit base64 canon-host canonicalize closeout dirname dup2 error exit exitfail extensions fnmatch fnmatch-posix ftruncate getdate gethostname getline getlogin_r getndelim2 getnline getopt getpagesize getpass-gnu gettext gettime gettimeofday glob inttypes lstat malloc md5 memmove minmax mkdir mkstemp mktime nanosleep pagealign_alloc pathmax quotearg readlink realloc regex rename save-cwd setenv stat-macros stdbool stdint strcase strdup strerror strftime strstr strtoul strtoumax time_r timespec tzset unlocked-io vasnprintf vasprintf xalloc-die xgethostname xreadlink xsize yesno

AUTOMAKE_OPTIONS = 1.5 gnits no-dependencies

noinst_LIBRARIES = libcvs.a

libcvs_a_SOURCES =
libcvs_a_LIBADD = @LIBOBJS@
noinst_HEADERS =
EXTRA_DIST =
BUILT_SOURCES =
SUFFIXES =
MOSTLYCLEANFILES = core *.stackdump
MOSTLYCLEANDIRS =
CLEANFILES =
DISTCLEANFILES =
MAINTAINERCLEANFILES =

AM_CPPFLAGS =

## begin gnulib module alloca


libcvs_a_LIBADD += @ALLOCA@
## end   gnulib module alloca

## begin gnulib module alloca-opt

BUILT_SOURCES += $(ALLOCA_H)
EXTRA_DIST += alloca_.h

# We need the following in order to create <alloca.h> when the system
# doesn't have one that works with the given compiler.
alloca.h: alloca_.h
	cp $(srcdir)/alloca_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += alloca.h alloca.h-t

## end   gnulib module alloca-opt

## begin gnulib module allocsa

libcvs_a_SOURCES += allocsa.h allocsa.c
EXTRA_DIST += allocsa.valgrind

## end   gnulib module allocsa

## begin gnulib module arpa_inet

BUILT_SOURCES += $(ARPA_INET_H)

# We need the following in order to create <arpa/inet.h> when the system
# doesn't have one.
arpa/inet.h:
	test -d arpa || mkdir arpa
	echo '#include <sys/socket.h>' >$@-t
	mv $@-t $@
MOSTLYCLEANFILES += arpa/inet.h arpa/inet.h-t
MOSTLYCLEANDIRS += arpa

## end   gnulib module arpa_inet

## begin gnulib module base64

libcvs_a_SOURCES += base64.h base64.c

## end   gnulib module base64

## begin gnulib module canon-host

EXTRA_DIST += canon-host.h

## end   gnulib module canon-host

## begin gnulib module canonicalize

EXTRA_DIST += canonicalize.h

## end   gnulib module canonicalize

## begin gnulib module chdir-long

EXTRA_DIST += chdir-long.h

## end   gnulib module chdir-long

## begin gnulib module close-stream

EXTRA_DIST += close-stream.h

## end   gnulib module close-stream

## begin gnulib module closeout

EXTRA_DIST += closeout.h

## end   gnulib module closeout

## begin gnulib module cycle-check

EXTRA_DIST += cycle-check.h

## end   gnulib module cycle-check

## begin gnulib module dev-ino

EXTRA_DIST += dev-ino.h

## end   gnulib module dev-ino

## begin gnulib module dirname

EXTRA_DIST += dirname.h

## end   gnulib module dirname

## begin gnulib module exit

libcvs_a_SOURCES += exit.h

## end   gnulib module exit

## begin gnulib module exitfail

EXTRA_DIST += exitfail.h

## end   gnulib module exitfail

## begin gnulib module fcntl

BUILT_SOURCES += $(FCNTL_H)
EXTRA_DIST += fcntl_.h

# We need the following in order to create <fcntl.h> when the system
# doesn't have one that works with the given compiler.
fcntl.h: fcntl_.h
	sed -e 's|@''ABSOLUTE_FCNTL_H''@|$(ABSOLUTE_FCNTL_H)|g' \
	    < $(srcdir)/fcntl_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += fcntl.h fcntl.h-t

## end   gnulib module fcntl

## begin gnulib module fcntl-safer

EXTRA_DIST += fcntl-safer.h fcntl--.h

## end   gnulib module fcntl-safer

## begin gnulib module filenamecat

EXTRA_DIST += filenamecat.h

## end   gnulib module filenamecat

## begin gnulib module fnmatch

BUILT_SOURCES += $(FNMATCH_H)
EXTRA_DIST += fnmatch_.h fnmatch_loop.c

# We need the following in order to create <fnmatch.h> when the system
# doesn't have one that supports the required API.
fnmatch.h: fnmatch_.h
	cp $(srcdir)/fnmatch_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += fnmatch.h fnmatch.h-t

## end   gnulib module fnmatch

## begin gnulib module fpending

EXTRA_DIST += __fpending.h

## end   gnulib module fpending

## begin gnulib module getaddrinfo

libcvs_a_SOURCES += getaddrinfo.h

## end   gnulib module getaddrinfo

## begin gnulib module getcwd

EXTRA_DIST += getcwd.h

## end   gnulib module getcwd

## begin gnulib module getdate

libcvs_a_SOURCES += getdate.y
BUILT_SOURCES += getdate.c
MAINTAINERCLEANFILES += getdate.c
EXTRA_DIST += getdate.c getdate.h

## end   gnulib module getdate

## begin gnulib module getdelim

EXTRA_DIST += getdelim.h

## end   gnulib module getdelim

## begin gnulib module getline

EXTRA_DIST += getline.h

## end   gnulib module getline

## begin gnulib module getlogin_r

EXTRA_DIST += getlogin_r.h

## end   gnulib module getlogin_r

## begin gnulib module getndelim2

EXTRA_DIST += getndelim2.h getndelim2.c

## end   gnulib module getndelim2

## begin gnulib module getnline

libcvs_a_SOURCES += getnline.h getnline.c

## end   gnulib module getnline

## begin gnulib module getopt

BUILT_SOURCES += $(GETOPT_H)
EXTRA_DIST += getopt_.h getopt_int.h

# We need the following in order to create <getopt.h> when the system
# doesn't have one that works with the given compiler.
getopt.h: getopt_.h
	cp $(srcdir)/getopt_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += getopt.h getopt.h-t

## end   gnulib module getopt

## begin gnulib module getpagesize

EXTRA_DIST += getpagesize.h

## end   gnulib module getpagesize

## begin gnulib module getpass-gnu

EXTRA_DIST += getpass.h

## end   gnulib module getpass-gnu

## begin gnulib module gettext

# This is for those projects which use "gettextize --intl" to put a source-code
# copy of libintl into their package. In such projects, every Makefile.am needs
# -I$(top_builddir)/intl, so that <libintl.h> can be found in this directory.
# For the Makefile.ams in other directories it is the maintainer's
# responsibility; for the one from gnulib we do it here.
# This option has no effect when the user disables NLS (because then the intl
# directory contains no libintl.h file) or when the project does not use
# "gettextize --intl".
AM_CPPFLAGS += -I$(top_builddir)/intl

## end   gnulib module gettext

## begin gnulib module gettext-h

libcvs_a_SOURCES += gettext.h

## end   gnulib module gettext-h

## begin gnulib module glob

BUILT_SOURCES += $(GLOB_H)
EXTRA_DIST += glob_.h glob-libc.h

# We need the following in order to create <glob.h> when the system
# doesn't have one that works with the given compiler.
glob.h: glob_.h
	cp $(srcdir)/glob_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += glob.h glob.h-t

## end   gnulib module glob

## begin gnulib module inet_ntop

libcvs_a_SOURCES += inet_ntop.h

## end   gnulib module inet_ntop

## begin gnulib module intprops

EXTRA_DIST += intprops.h

## end   gnulib module intprops

## begin gnulib module inttypes

BUILT_SOURCES += $(INTTYPES_H)
EXTRA_DIST += inttypes_.h

# We need the following in order to create <inttypes.h> when the system
# doesn't have one that works with the given compiler.
inttypes.h: inttypes_.h
	sed -e 's/@''HAVE_INTTYPES_H''@/$(HAVE_INTTYPES_H)/g' \
	    -e 's|@''ABSOLUTE_INTTYPES_H''@|$(ABSOLUTE_INTTYPES_H)|g' \
	    -e 's/@''PRI_MACROS_BROKEN''@/$(PRI_MACROS_BROKEN)/g' \
	    -e 's/@''HAVE_LONG_LONG_INT''@/$(HAVE_LONG_LONG_INT)/g' \
	    -e 's/@''PRIPTR_PREFIX''@/$(PRIPTR_PREFIX)/g' \
	    -e 's/@''HAVE_DECL_IMAXABS''@/$(HAVE_DECL_IMAXABS)/g' \
	    -e 's/@''HAVE_DECL_IMAXDIV''@/$(HAVE_DECL_IMAXDIV)/g' \
	    -e 's/@''HAVE_DECL_STRTOIMAX''@/$(HAVE_DECL_STRTOIMAX)/g' \
	    -e 's/@''HAVE_DECL_STRTOUMAX''@/$(HAVE_DECL_STRTOUMAX)/g' \
	    < $(srcdir)/inttypes_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += inttypes.h inttypes.h-t

## end   gnulib module inttypes

## begin gnulib module lchown

EXTRA_DIST += lchown.h

## end   gnulib module lchown

## begin gnulib module lstat

EXTRA_DIST += lstat.h

## end   gnulib module lstat

## begin gnulib module mbchar

libcvs_a_SOURCES += mbchar.h

## end   gnulib module mbchar

## begin gnulib module mbuiter

libcvs_a_SOURCES += mbuiter.h

## end   gnulib module mbuiter

## begin gnulib module md5

libcvs_a_SOURCES += md5.h

## end   gnulib module md5

## begin gnulib module mempcpy

EXTRA_DIST += mempcpy.h

## end   gnulib module mempcpy

## begin gnulib module memrchr

EXTRA_DIST += memrchr.h

## end   gnulib module memrchr

## begin gnulib module minmax

libcvs_a_SOURCES += minmax.h

## end   gnulib module minmax

## begin gnulib module netinet_in

BUILT_SOURCES += $(NETINET_IN_H)

# We need the following in order to create <netinet/in.h> when the system
# doesn't have one.
netinet/in.h:
	test -d netinet || mkdir netinet
	echo '#include <sys/socket.h>' >$@-t
	mv $@-t $@
MOSTLYCLEANFILES += netinet/in.h netinet/in.h-t
MOSTLYCLEANDIRS += netinet

## end   gnulib module netinet_in

## begin gnulib module openat

EXTRA_DIST += at-func.c openat.h openat-priv.h

## end   gnulib module openat

## begin gnulib module pagealign_alloc

EXTRA_DIST += pagealign_alloc.h

## end   gnulib module pagealign_alloc

## begin gnulib module pathmax

EXTRA_DIST += pathmax.h

## end   gnulib module pathmax

## begin gnulib module quotearg

EXTRA_DIST += quotearg.h

## end   gnulib module quotearg

## begin gnulib module regex

EXTRA_DIST += regcomp.c regex.h regex_internal.c regex_internal.h regexec.c

## end   gnulib module regex

## begin gnulib module same-inode

EXTRA_DIST += same-inode.h

## end   gnulib module same-inode

## begin gnulib module save-cwd

EXTRA_DIST += save-cwd.h

## end   gnulib module save-cwd

## begin gnulib module setenv

libcvs_a_SOURCES += setenv.h

## end   gnulib module setenv

## begin gnulib module size_max

libcvs_a_SOURCES += size_max.h

## end   gnulib module size_max

## begin gnulib module snprintf

libcvs_a_SOURCES += snprintf.h

## end   gnulib module snprintf

## begin gnulib module stat-macros

EXTRA_DIST += stat-macros.h

## end   gnulib module stat-macros

## begin gnulib module stdbool

BUILT_SOURCES += $(STDBOOL_H)
EXTRA_DIST += stdbool_.h

# We need the following in order to create <stdbool.h> when the system
# doesn't have one that works.
stdbool.h: stdbool_.h
	sed -e 's/@''HAVE__BOOL''@/$(HAVE__BOOL)/g' < $(srcdir)/stdbool_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += stdbool.h stdbool.h-t

## end   gnulib module stdbool

## begin gnulib module stdint

BUILT_SOURCES += $(STDINT_H)
EXTRA_DIST += stdint_.h

# We need the following in order to create <stdint.h> when the system
# doesn't have one that works with the given compiler.
stdint.h: stdint_.h
	sed -e 's/@''HAVE_WCHAR_H''@/$(HAVE_WCHAR_H)/g' \
	    -e 's/@''HAVE_STDINT_H''@/$(HAVE_STDINT_H)/g' \
	    -e 's|@''ABSOLUTE_STDINT_H''@|$(ABSOLUTE_STDINT_H)|g' \
	    -e 's/@''HAVE_SYS_TYPES_H''@/$(HAVE_SYS_TYPES_H)/g' \
	    -e 's/@''HAVE_INTTYPES_H''@/$(HAVE_INTTYPES_H)/g' \
	    -e 's/@''HAVE_SYS_INTTYPES_H''@/$(HAVE_SYS_INTTYPES_H)/g' \
	    -e 's/@''HAVE_SYS_BITYPES_H''@/$(HAVE_SYS_BITYPES_H)/g' \
	    -e 's/@''HAVE_LONG_LONG_INT''@/$(HAVE_LONG_LONG_INT)/g' \
	    -e 's/@''BITSIZEOF_PTRDIFF_T''@/$(BITSIZEOF_PTRDIFF_T)/g' \
	    -e 's/@''PTRDIFF_T_SUFFIX''@/$(PTRDIFF_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_SIG_ATOMIC_T''@/$(BITSIZEOF_SIG_ATOMIC_T)/g' \
	    -e 's/@''HAVE_SIGNED_SIG_ATOMIC_T''@/$(HAVE_SIGNED_SIG_ATOMIC_T)/g' \
	    -e 's/@''SIG_ATOMIC_T_SUFFIX''@/$(SIG_ATOMIC_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_SIZE_T''@/$(BITSIZEOF_SIZE_T)/g' \
	    -e 's/@''SIZE_T_SUFFIX''@/$(SIZE_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_WCHAR_T''@/$(BITSIZEOF_WCHAR_T)/g' \
	    -e 's/@''HAVE_SIGNED_WCHAR_T''@/$(HAVE_SIGNED_WCHAR_T)/g' \
	    -e 's/@''WCHAR_T_SUFFIX''@/$(WCHAR_T_SUFFIX)/g' \
	    -e 's/@''BITSIZEOF_WINT_T''@/$(BITSIZEOF_WINT_T)/g' \
	    -e 's/@''HAVE_SIGNED_WINT_T''@/$(HAVE_SIGNED_WINT_T)/g' \
	    -e 's/@''WINT_T_SUFFIX''@/$(WINT_T_SUFFIX)/g' \
	    < $(srcdir)/stdint_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += stdint.h stdint.h-t

## end   gnulib module stdint

## begin gnulib module strcase

libcvs_a_SOURCES += strcase.h

## end   gnulib module strcase

## begin gnulib module strdup

EXTRA_DIST += strdup.h

## end   gnulib module strdup

## begin gnulib module strftime

EXTRA_DIST += strftime.h

## end   gnulib module strftime

## begin gnulib module strndup

EXTRA_DIST += strndup.h

## end   gnulib module strndup

## begin gnulib module strnlen

EXTRA_DIST += strnlen.h

## end   gnulib module strnlen

## begin gnulib module strnlen1

libcvs_a_SOURCES += strnlen1.h strnlen1.c

## end   gnulib module strnlen1

## begin gnulib module strstr

libcvs_a_SOURCES += strstr.h

## end   gnulib module strstr

## begin gnulib module sys_socket

BUILT_SOURCES += $(SYS_SOCKET_H)
EXTRA_DIST += socket_.h

# We need the following in order to create <sys/socket.h> when the system
# doesn't have one that works with the given compiler.
sys/socket.h: socket_.h
	test -d sys || mkdir sys
	cp $(srcdir)/socket_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += sys/socket.h sys/socket.h-t
MOSTLYCLEANDIRS += sys

## end   gnulib module sys_socket

## begin gnulib module sys_stat

BUILT_SOURCES += $(SYS_STAT_H)
EXTRA_DIST += stat_.h

# We need the following in order to create <sys/stat.h> when the system
# has one that is incomplete.
sys/stat.h: stat_.h
	test -d sys || mkdir sys
	sed -e 's|@''ABSOLUTE_SYS_STAT_H''@|$(ABSOLUTE_SYS_STAT_H)|g' \
	    < $(srcdir)/stat_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += sys/stat.h sys/stat.h-t
MOSTLYCLEANDIRS += sys

## end   gnulib module sys_stat

## begin gnulib module time_r

EXTRA_DIST += time_r.h

## end   gnulib module time_r

## begin gnulib module timespec

EXTRA_DIST += timespec.h

## end   gnulib module timespec

## begin gnulib module unistd

BUILT_SOURCES += $(UNISTD_H)

# We need the following in order to create an empty placeholder for
# <unistd.h> when the system doesn't have one.
unistd.h:
	echo '/* Empty placeholder for $@.  */' >$@
MOSTLYCLEANFILES += unistd.h

## end   gnulib module unistd

## begin gnulib module unistd-safer

EXTRA_DIST += unistd-safer.h unistd--.h

## end   gnulib module unistd-safer

## begin gnulib module unlocked-io

EXTRA_DIST += unlocked-io.h

## end   gnulib module unlocked-io

## begin gnulib module vasnprintf

libcvs_a_SOURCES += printf-args.h printf-parse.h vasnprintf.h

## end   gnulib module vasnprintf

## begin gnulib module vasprintf

libcvs_a_SOURCES += vasprintf.h

## end   gnulib module vasprintf

## begin gnulib module verify

libcvs_a_SOURCES += verify.h

## end   gnulib module verify

## begin gnulib module wcwidth

libcvs_a_SOURCES += wcwidth.h

## end   gnulib module wcwidth

## begin gnulib module xalloc

EXTRA_DIST += xalloc.h

## end   gnulib module xalloc

## begin gnulib module xalloc-die

libcvs_a_SOURCES += xalloc-die.c

## end   gnulib module xalloc-die

## begin gnulib module xgetcwd

EXTRA_DIST += xgetcwd.h

## end   gnulib module xgetcwd

## begin gnulib module xgethostname

libcvs_a_SOURCES += xgethostname.h xgethostname.c

## end   gnulib module xgethostname

## begin gnulib module xreadlink

EXTRA_DIST += xreadlink.h

## end   gnulib module xreadlink

## begin gnulib module xsize

libcvs_a_SOURCES += xsize.h

## end   gnulib module xsize

## begin gnulib module xstrndup

libcvs_a_SOURCES += xstrndup.h xstrndup.c

## end   gnulib module xstrndup

## begin gnulib module yesno

EXTRA_DIST += yesno.h

## end   gnulib module yesno


mostlyclean-local: mostlyclean-generic
	@test -z "$(MOSTLYCLEANDIRS)" || \
	  for dir in $(MOSTLYCLEANDIRS); do \
	    if test -d $$dir; then \
	      echo "rmdir $$dir"; rmdir $$dir; \
	    fi; \
	  done
